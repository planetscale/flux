### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Lens {
  description: String!
  id: Int!
  name: String!
  org: Org!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
}

input LensCreateInput {
  description: String!
  name: String!
  org: OrgCreateOneWithoutLensInput!
  posts: PostCreateManyWithoutLensInput
}

input LensCreateManyWithoutOrgInput {
  connect: [LensWhereUniqueInput!]
  connectOrCreate: [LensCreateOrConnectWithoutorgInput!]
  create: [LensCreateWithoutOrgInput!]
}

input LensCreateOneWithoutPostsInput {
  connect: LensWhereUniqueInput
  connectOrCreate: LensCreateOrConnectWithoutpostsInput
  create: LensCreateWithoutPostsInput
}

input LensCreateOrConnectWithoutorgInput {
  create: LensCreateWithoutOrgInput!
  where: LensWhereUniqueInput!
}

input LensCreateOrConnectWithoutpostsInput {
  create: LensCreateWithoutPostsInput!
  where: LensWhereUniqueInput!
}

input LensCreateWithoutOrgInput {
  description: String!
  name: String!
  posts: PostCreateManyWithoutLensInput
}

input LensCreateWithoutPostsInput {
  description: String!
  name: String!
  org: OrgCreateOneWithoutLensInput!
}

input LensScalarWhereInput {
  AND: [LensScalarWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [LensScalarWhereInput!]
  OR: [LensScalarWhereInput!]
  orgId: IntFilter
}

input LensUpdateInput {
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  org: OrgUpdateOneRequiredWithoutLensInput
  posts: PostUpdateManyWithoutLensInput
}

input LensUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LensUpdateManyWithoutOrgInput {
  connect: [LensWhereUniqueInput!]
  connectOrCreate: [LensCreateOrConnectWithoutorgInput!]
  create: [LensCreateWithoutOrgInput!]
  delete: [LensWhereUniqueInput!]
  deleteMany: [LensScalarWhereInput!]
  disconnect: [LensWhereUniqueInput!]
  set: [LensWhereUniqueInput!]
  update: [LensUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [LensUpdateManyWithWhereWithoutOrgInput!]
  upsert: [LensUpsertWithWhereUniqueWithoutOrgInput!]
}

input LensUpdateManyWithWhereWithoutOrgInput {
  data: LensUpdateManyMutationInput!
  where: LensScalarWhereInput!
}

input LensUpdateOneRequiredWithoutPostsInput {
  connect: LensWhereUniqueInput
  connectOrCreate: LensCreateOrConnectWithoutpostsInput
  create: LensCreateWithoutPostsInput
  update: LensUpdateWithoutPostsInput
  upsert: LensUpsertWithoutPostsInput
}

input LensUpdateWithoutOrgInput {
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutLensInput
}

input LensUpdateWithoutPostsInput {
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  org: OrgUpdateOneRequiredWithoutLensInput
}

input LensUpdateWithWhereUniqueWithoutOrgInput {
  data: LensUpdateWithoutOrgInput!
  where: LensWhereUniqueInput!
}

input LensUpsertWithoutPostsInput {
  create: LensCreateWithoutPostsInput!
  update: LensUpdateWithoutPostsInput!
}

input LensUpsertWithWhereUniqueWithoutOrgInput {
  create: LensCreateWithoutOrgInput!
  update: LensUpdateWithoutOrgInput!
  where: LensWhereUniqueInput!
}

input LensWhereUniqueInput {
  id: Int
  name: String
}

type Mutation {
  createOneLens(data: LensCreateInput!): Lens!
  createOneOrg(data: OrgCreateInput!): Org!
  createOnePost(data: PostCreateInput!): Post!
  createOneReply(data: ReplyCreateInput!): Reply!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: UserCreateInput!): User!
  deleteOneLens(where: LensWhereUniqueInput!): Lens
  deleteOneOrg(where: OrgWhereUniqueInput!): Org
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneReply(where: ReplyWhereUniqueInput!): Reply
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneLens(data: LensUpdateInput!, where: LensWhereUniqueInput!): Lens
  updateOneOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Org {
  createdAt: String!
  id: Int!
  lenses: [Lens]
  name: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input OrgCreateInput {
  createdAt: String!
  Lens: LensCreateManyWithoutOrgInput
  name: String!
  users: UserCreateManyWithoutOrgInput
}

input OrgCreateOneWithoutLensInput {
  connect: OrgWhereUniqueInput
  connectOrCreate: OrgCreateOrConnectWithoutLensInput
  create: OrgCreateWithoutLensInput
}

input OrgCreateOneWithoutUsersInput {
  connect: OrgWhereUniqueInput
  connectOrCreate: OrgCreateOrConnectWithoutusersInput
  create: OrgCreateWithoutUsersInput
}

input OrgCreateOrConnectWithoutLensInput {
  create: OrgCreateWithoutLensInput!
  where: OrgWhereUniqueInput!
}

input OrgCreateOrConnectWithoutusersInput {
  create: OrgCreateWithoutUsersInput!
  where: OrgWhereUniqueInput!
}

input OrgCreateWithoutLensInput {
  createdAt: String!
  name: String!
  users: UserCreateManyWithoutOrgInput
}

input OrgCreateWithoutUsersInput {
  createdAt: String!
  Lens: LensCreateManyWithoutOrgInput
  name: String!
}

input OrgUpdateInput {
  createdAt: StringFieldUpdateOperationsInput
  Lens: LensUpdateManyWithoutOrgInput
  name: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutOrgInput
}

input OrgUpdateOneRequiredWithoutLensInput {
  connect: OrgWhereUniqueInput
  connectOrCreate: OrgCreateOrConnectWithoutLensInput
  create: OrgCreateWithoutLensInput
  update: OrgUpdateWithoutLensInput
  upsert: OrgUpsertWithoutLensInput
}

input OrgUpdateOneRequiredWithoutUsersInput {
  connect: OrgWhereUniqueInput
  connectOrCreate: OrgCreateOrConnectWithoutusersInput
  create: OrgCreateWithoutUsersInput
  update: OrgUpdateWithoutUsersInput
  upsert: OrgUpsertWithoutUsersInput
}

input OrgUpdateWithoutLensInput {
  createdAt: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutUsersInput {
  createdAt: StringFieldUpdateOperationsInput
  Lens: LensUpdateManyWithoutOrgInput
  name: StringFieldUpdateOperationsInput
}

input OrgUpsertWithoutLensInput {
  create: OrgCreateWithoutLensInput!
  update: OrgUpdateWithoutLensInput!
}

input OrgUpsertWithoutUsersInput {
  create: OrgCreateWithoutUsersInput!
  update: OrgUpdateWithoutUsersInput!
}

input OrgWhereUniqueInput {
  id: Int
  name: String
}

type Post {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  lens: Lens!
  name: String!
  published: Boolean!
  replies(after: ReplyWhereUniqueInput, before: ReplyWhereUniqueInput, first: Int, last: Int): [Reply!]!
  summary: String!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  lens: LensCreateOneWithoutPostsInput!
  name: String!
  published: Boolean
  replies: ReplyCreateManyWithoutPostInput
  summary: String!
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutLensInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutlensInput!]
  create: [PostCreateWithoutLensInput!]
}

input PostCreateManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithouttagsInput!]
  create: [PostCreateWithoutTagsInput!]
}

input PostCreateOneWithoutRepliesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutrepliesInput
  create: PostCreateWithoutRepliesInput
}

input PostCreateOrConnectWithoutauthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutlensInput {
  create: PostCreateWithoutLensInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutrepliesInput {
  create: PostCreateWithoutRepliesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithouttagsInput {
  create: PostCreateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  lens: LensCreateOneWithoutPostsInput!
  name: String!
  published: Boolean
  replies: ReplyCreateManyWithoutPostInput
  summary: String!
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateWithoutLensInput {
  author: UserCreateOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  name: String!
  published: Boolean
  replies: ReplyCreateManyWithoutPostInput
  summary: String!
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateWithoutRepliesInput {
  author: UserCreateOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  lens: LensCreateOneWithoutPostsInput!
  name: String!
  published: Boolean
  summary: String!
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateWithoutTagsInput {
  author: UserCreateOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  lens: LensCreateOneWithoutPostsInput!
  name: String!
  published: Boolean
  replies: ReplyCreateManyWithoutPostInput
  summary: String!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  lensId: IntFilter
  name: StringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BoolFilter
  summary: StringFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  lens: LensUpdateOneRequiredWithoutPostsInput
  name: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutPostInput
  summary: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutLensInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutlensInput!]
  create: [PostCreateWithoutLensInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutLensInput!]
  updateMany: [PostUpdateManyWithWhereWithoutLensInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutLensInput!]
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutLensInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutRepliesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutrepliesInput
  create: PostCreateWithoutRepliesInput
  update: PostUpdateWithoutRepliesInput
  upsert: PostUpsertWithoutRepliesInput
}

input PostUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  lens: LensUpdateOneRequiredWithoutPostsInput
  name: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutPostInput
  summary: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateWithoutLensInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutPostInput
  summary: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateWithoutRepliesInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  lens: LensUpdateOneRequiredWithoutPostsInput
  name: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutLensInput {
  data: PostUpdateWithoutLensInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput!
  update: PostUpdateWithoutRepliesInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutLensInput {
  create: PostCreateWithoutLensInput!
  update: PostUpdateWithoutLensInput!
  where: PostWhereUniqueInput!
}

input PostWhereUniqueInput {
  id: Int
}

type Profile {
  avatar: String!
  bio: String!
  id: Int!
  user: User!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutuserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  avatar: String!
  bio: String!
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  avatar: StringFieldUpdateOperationsInput
  bio: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  lens(after: LensWhereUniqueInput, before: LensWhereUniqueInput, first: Int, last: Int): [Lens!]!
  lenses: [Lens]
  org(where: OrgWhereUniqueInput!): Org
  orgs(after: OrgWhereUniqueInput, before: OrgWhereUniqueInput, first: Int, last: Int): [Org!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  replies(after: ReplyWhereUniqueInput, before: ReplyWhereUniqueInput, first: Int, last: Int): [Reply!]!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  user(where: UserWhereUniqueInput!): User
}

type Reply {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
}

input ReplyCreateInput {
  author: UserCreateOneWithoutReplyInput!
  content: String!
  createdAt: DateTime
  post: PostCreateOneWithoutRepliesInput!
}

input ReplyCreateManyWithoutAuthorInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutauthorInput!]
  create: [ReplyCreateWithoutAuthorInput!]
}

input ReplyCreateManyWithoutPostInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutpostInput!]
  create: [ReplyCreateWithoutPostInput!]
}

input ReplyCreateOrConnectWithoutauthorInput {
  create: ReplyCreateWithoutAuthorInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutpostInput {
  create: ReplyCreateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  post: PostCreateOneWithoutRepliesInput!
}

input ReplyCreateWithoutPostInput {
  author: UserCreateOneWithoutReplyInput!
  content: String!
  createdAt: DateTime
}

input ReplyScalarWhereInput {
  AND: [ReplyScalarWhereInput!]
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  postId: IntFilter
}

input ReplyUpdateInput {
  author: UserUpdateOneRequiredWithoutReplyInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ReplyUpdateManyWithoutAuthorInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutauthorInput!]
  create: [ReplyCreateWithoutAuthorInput!]
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReplyUpdateManyWithoutPostInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutpostInput!]
  create: [ReplyCreateWithoutPostInput!]
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutPostInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutPostInput!]
}

input ReplyUpdateManyWithWhereWithoutAuthorInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithWhereWithoutPostInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdateWithoutPostInput {
  author: UserUpdateOneRequiredWithoutReplyInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ReplyUpdateWithWhereUniqueWithoutAuthorInput {
  data: ReplyUpdateWithoutAuthorInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithWhereUniqueWithoutPostInput {
  data: ReplyUpdateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutAuthorInput {
  create: ReplyCreateWithoutAuthorInput!
  update: ReplyUpdateWithoutAuthorInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutPostInput {
  create: ReplyCreateWithoutPostInput!
  update: ReplyUpdateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyWhereUniqueInput {
  id: Int
}

enum Role {
  ADMIN
  USER
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  id: Int!
  name: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
}

input TagCreateInput {
  name: String!
  posts: PostCreateManyWithoutTagsInput
}

input TagCreateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutpostsInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateOrConnectWithoutpostsInput {
  create: TagCreateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutPostsInput {
  name: String!
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
}

input TagUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutpostsInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateManyWithWhereWithoutPostsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutPostsInput {
  name: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagWhereUniqueInput {
  id: Int
}

type User {
  createdAt: String!
  displayName: String!
  email: String!
  id: Int!
  org: Org!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  profile: Profile
  role: Role!
  username: String!
}

input UserCreateInput {
  createdAt: String!
  displayName: String!
  email: String!
  org: OrgCreateOneWithoutUsersInput!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
  Reply: ReplyCreateManyWithoutAuthorInput
  role: Role
  username: String!
}

input UserCreateManyWithoutOrgInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutorgInput!]
  create: [UserCreateWithoutOrgInput!]
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutReplyInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReplyInput
  create: UserCreateWithoutReplyInput
}

input UserCreateOrConnectWithoutorgInput {
  create: UserCreateWithoutOrgInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutpostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReplyInput {
  create: UserCreateWithoutReplyInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutOrgInput {
  createdAt: String!
  displayName: String!
  email: String!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
  Reply: ReplyCreateManyWithoutAuthorInput
  role: Role
  username: String!
}

input UserCreateWithoutPostsInput {
  createdAt: String!
  displayName: String!
  email: String!
  org: OrgCreateOneWithoutUsersInput!
  profile: ProfileCreateOneWithoutUserInput
  Reply: ReplyCreateManyWithoutAuthorInput
  role: Role
  username: String!
}

input UserCreateWithoutReplyInput {
  createdAt: String!
  displayName: String!
  email: String!
  org: OrgCreateOneWithoutUsersInput!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
  role: Role
  username: String!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: StringFilter
  displayName: StringFilter
  email: StringFilter
  id: IntFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  orgId: IntFilter
  role: EnumRoleFilter
  username: StringFilter
}

input UserUpdateInput {
  createdAt: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  org: OrgUpdateOneRequiredWithoutUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
  Reply: ReplyUpdateManyWithoutAuthorInput
  role: EnumRoleFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutOrgInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutorgInput!]
  create: [UserCreateWithoutOrgInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [UserUpdateManyWithWhereWithoutOrgInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrgInput!]
}

input UserUpdateManyWithWhereWithoutOrgInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutReplyInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReplyInput
  create: UserCreateWithoutReplyInput
  update: UserUpdateWithoutReplyInput
  upsert: UserUpsertWithoutReplyInput
}

input UserUpdateWithoutOrgInput {
  createdAt: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
  Reply: ReplyUpdateManyWithoutAuthorInput
  role: EnumRoleFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  createdAt: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  org: OrgUpdateOneRequiredWithoutUsersInput
  profile: ProfileUpdateOneWithoutUserInput
  Reply: ReplyUpdateManyWithoutAuthorInput
  role: EnumRoleFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutReplyInput {
  createdAt: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  org: OrgUpdateOneRequiredWithoutUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutOrgInput {
  data: UserUpdateWithoutOrgInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserUpsertWithoutReplyInput {
  create: UserCreateWithoutReplyInput!
  update: UserUpdateWithoutReplyInput!
}

input UserUpsertWithWhereUniqueWithoutOrgInput {
  create: UserCreateWithoutOrgInput!
  update: UserUpdateWithoutOrgInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}
